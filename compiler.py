import streamlit as st
import os
import google.generativeai as genai
import requests

# Set your API key for GenerativeAI
os.environ['GOOGLE_API_KEY'] = "AIzaSyAXdqL57ifjEXUyrrDsyQ8C3sU4VfOzcIg"
# Configure GenerativeAI library with the API key
genai.configure(api_key=os.environ['GOOGLE_API_KEY'])

def generate_content(prompt):
    # Generate content using the GenerativeAI library
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt)
    return [part.text for part in response.parts]

def compile_code(language, code):
    url = "https://online-code-compiler.p.rapidapi.com/v1/"
    headers = {
        "Content-Type": "application/json",
        "X-RapidAPI-Key": "cb95cc8924mshc0cdc4f61ded9cdp166837jsn803257658a9d",
        "X-RapidAPI-Host": "online-code-compiler.p.rapidapi.com",
    }

    payload = {
        "language": language,
        "version": "latest",
        "code": code,
        "input": None,
    }

    response = requests.post(url, json=payload, headers=headers)
    return response.json()

def main():
    st.title("CodeLens: Compile & Explain")

    # Input: programming language and code
    top_languages = [
        "Python3", "Java", "C", "CPP", "R", "Kotlin", "PHP",
        "Swift", "Go", "Rust", "Ruby"
    ]

    language = st.selectbox("Select Programming Language", top_languages)
    code = st.text_area("Enter Your Code Here", height=10)

    if st.button("Compile and Generate Explanation"):
        # Compile code and get the result
        compile_result = compile_code(language.lower(), code)

        # Include compiled output in the prompt for GenerativeAI
        prompt = f"Explain how the following code works in {language}:\n\n{code}\n\nCompiled Output:\n\n"
        prompt += compile_result.get("output", "No output generated.")

        # Generate content using GenerativeAI
        explanation_content = generate_content(prompt)

        # Display the result
        st.subheader("Compilation Result:")
        st.json(compile_result)

        # Display explanation based on the result
        st.subheader("Explanation:")
        if "output" in compile_result:
            st.markdown("#### Output Explanation:")
            st.text("The code successfully compiled and executed.")
            st.text("Output:")
            st.code(compile_result["output"], language="text")

        elif "error" in compile_result:
            st.markdown("#### Compilation Error:")
            st.text("There was an error during compilation.")
            st.text(f"Error Message: {compile_result['error']}")

        else:
            st.text("No output generated.")

        # Display the explanation generated by GenerativeAI
        st.markdown("**Code Explanation:**")
        for part in explanation_content:
            st.write(part)

if __name__ == "__main__":
    main()
